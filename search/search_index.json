{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nexus Unit Testing Nexus Unit Testing is an assertion based unit testing framework for Roblox development. Included is also a set of utilities which aren't exclusive to Nexus Unit Testing. Roblox Studio Plugin No plugin is currently included. One is in progress and will be released before the end of December.","title":"Home"},{"location":"#nexus-unit-testing","text":"Nexus Unit Testing is an assertion based unit testing framework for Roblox development. Included is also a set of utilities which aren't exclusive to Nexus Unit Testing.","title":"Nexus Unit Testing"},{"location":"#roblox-studio-plugin","text":"No plugin is currently included. One is in progress and will be released before the end of December.","title":"Roblox Studio Plugin"},{"location":"contributing/","text":"Contributing Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Have the appropriate unit tests as examples. This is mainly for new utilities. 4. Comments are included. Pulling Into Studio The format of this repository is based on rojo by LPGhatguy . Any other tools that follow the same file structure will work. Exporting From Studio No public tool is currently provided for exporting Rojo projects from Roblox Studio. \"Nexus Project Syncer\" currently exists as an internal tool but will require significant work done before it can be released. The end goal of that project will be to replace Rojo while still being compatible. This functionality is expected to be added to Rojo in the near future.","title":"Contributing"},{"location":"contributing/#contributing","text":"Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Have the appropriate unit tests as examples. This is mainly for new utilities. 4. Comments are included.","title":"Contributing"},{"location":"contributing/#pulling-into-studio","text":"The format of this repository is based on rojo by LPGhatguy . Any other tools that follow the same file structure will work.","title":"Pulling Into Studio"},{"location":"contributing/#exporting-from-studio","text":"No public tool is currently provided for exporting Rojo projects from Roblox Studio. \"Nexus Project Syncer\" currently exists as an internal tool but will require significant work done before it can be released. The end goal of that project will be to replace Rojo while still being compatible. This functionality is expected to be added to Rojo in the near future.","title":"Exporting From Studio"},{"location":"getting-started/nexus-unit-testing-module/","text":"Nexus Unit Testing Module The following is the documentation for the main module. Examples can be found in: 1. /test/NexusUnitTesting_Assertions.lua 2. /test/NexusUnitTesting_EdgeCases.lua 3. /test/NexusUnitTesting_Static.lua Properties NexusUnitTesting.Util A table of the available utilities included as part of Nexus Unit Testing. Right now this includes: 1. NexusUnitTesting.Util.DependencyInjector Functions NexusUnitTesting.new() Creates an instance of a NexusUnitTesting as an individual unit test. A Name can also be assigned to the object. Note This is meant for internal use. It is recommended to use NexusUnitTesting::RegisterUnitTest instead. Not using that function may result in compatibility problems when running unit tests. Note Instantiating a unit test is not required to run assertions. Assertions are run statically, but will not have an associated name and will not implicitly call pass at the end of a unit test. NexusUnitTesting:Pass() Ends the unit tests and considers the test a success. Note This is implictly called with a unit test ran with NexusUnitTesting::RegisterUnitTest . Warning This method will cause the current thread to yield. If unit tests are not run as separate processes, this will stop all unit tests (and anything else) being run. NexusUnitTesting::RegisterUnitTest is recommended to avoid this behavior. NexusUnitTesting:Fail() Ends the unit tests and considers the test a failure. Warning This method will cause the current thread to yield. If unit tests are not run as separate processes, this will stop all unit tests (and anything else) being run. NexusUnitTesting::RegisterUnitTest is recommended to avoid this behavior. NexusUnitTesting:Assert(Function Assertion,String FailureMessage) Runs the given function. If the function returns true, the assertion is considered true. If anything else is returned, the assertion is considered false and will fail the unit test. If the assertion fails, the message will be an error message. Tip All assertions will call this function to with a function. This means only this can be overridden rather than all of the assertions NexusUnitTesting:AssertEquals(Object Expected,Object Actual,String FailureMessage) Asserts that two objects are equivalent. This is intended for tables that may have the same entries but different memory references. Bug There is no check for cyclic tables. A recursive depth will be reached instead of returning the correct value. NexusUnitTesting:AssertNotEquals(Object NotExpected,Object Actual,String FailureMessage) Asserts that two objects are not equivalent. This is intended for tables that may have the same entries but different memory references. Bug There is no check for cyclic tables. A recursive depth will be reached instead of returning the correct value. NexusUnitTesting:AssertSame(Object Expected,Object Actual,String FailureMessage) Asserts that performing == on the two objects is true. For tables, this means the memory reference has to be the same. NexusUnitTesting:AssertNotSame(Object NotExpected,Object Actual,String FailureMessage) Asserts that performing == on the two objects is false. For tables, this means the memory reference has to be the same. NexusUnitTesting:AssertClose(Object Expected,Object Actual,Float Epsilon,String FailureMessage) Asserts that two objects are within a given Epsilon of each other. This is recommended for floats or data types that include floats. NexusUnitTesting:AssertNotClose(Object NotExpected,Object Actual,Float Epsilon,String FailureMessage) Asserts that two objects are not within a given Epsilon of each other. This is recommended for floats or data types that include floats. NexusUnitTesting:AssertTrue(Boolean Actual,String FailureMessage) Asserts that a given bool is true . NexusUnitTesting:AssertFalse(Boolean Actual,String FailureMessage) Asserts that a given bool is false . NexusUnitTesting:AssertNil(Object Actual,String FailureMessage) Asserts that a given object is nil . NexusUnitTesting:AssertNotNil(Object Actual,String FailureMessage) Asserts that a given object is not nil . NexusUnitTesting:RegisterUnitTest(String Name,Function UnitTestFunction) Creates an instance of a unit test, sets the name of the unit test, and runs the unit test function in a co-routine. The given function has the unit test as a parameter for running assertions.","title":"Nexus Unit Testing Module"},{"location":"getting-started/nexus-unit-testing-module/#nexus-unit-testing-module","text":"The following is the documentation for the main module. Examples can be found in: 1. /test/NexusUnitTesting_Assertions.lua 2. /test/NexusUnitTesting_EdgeCases.lua 3. /test/NexusUnitTesting_Static.lua","title":"Nexus Unit Testing Module"},{"location":"getting-started/nexus-unit-testing-module/#properties","text":"","title":"Properties"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingutil","text":"A table of the available utilities included as part of Nexus Unit Testing. Right now this includes: 1. NexusUnitTesting.Util.DependencyInjector","title":"NexusUnitTesting.Util"},{"location":"getting-started/nexus-unit-testing-module/#functions","text":"","title":"Functions"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingnew","text":"Creates an instance of a NexusUnitTesting as an individual unit test. A Name can also be assigned to the object. Note This is meant for internal use. It is recommended to use NexusUnitTesting::RegisterUnitTest instead. Not using that function may result in compatibility problems when running unit tests. Note Instantiating a unit test is not required to run assertions. Assertions are run statically, but will not have an associated name and will not implicitly call pass at the end of a unit test.","title":"NexusUnitTesting.new()"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingpass","text":"Ends the unit tests and considers the test a success. Note This is implictly called with a unit test ran with NexusUnitTesting::RegisterUnitTest . Warning This method will cause the current thread to yield. If unit tests are not run as separate processes, this will stop all unit tests (and anything else) being run. NexusUnitTesting::RegisterUnitTest is recommended to avoid this behavior.","title":"NexusUnitTesting:Pass()"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingfail","text":"Ends the unit tests and considers the test a failure. Warning This method will cause the current thread to yield. If unit tests are not run as separate processes, this will stop all unit tests (and anything else) being run. NexusUnitTesting::RegisterUnitTest is recommended to avoid this behavior.","title":"NexusUnitTesting:Fail()"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertfunction-assertionstring-failuremessage","text":"Runs the given function. If the function returns true, the assertion is considered true. If anything else is returned, the assertion is considered false and will fail the unit test. If the assertion fails, the message will be an error message. Tip All assertions will call this function to with a function. This means only this can be overridden rather than all of the assertions","title":"NexusUnitTesting:Assert(Function Assertion,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertequalsobject-expectedobject-actualstring-failuremessage","text":"Asserts that two objects are equivalent. This is intended for tables that may have the same entries but different memory references. Bug There is no check for cyclic tables. A recursive depth will be reached instead of returning the correct value.","title":"NexusUnitTesting:AssertEquals(Object Expected,Object Actual,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertnotequalsobject-notexpectedobject-actualstring-failuremessage","text":"Asserts that two objects are not equivalent. This is intended for tables that may have the same entries but different memory references. Bug There is no check for cyclic tables. A recursive depth will be reached instead of returning the correct value.","title":"NexusUnitTesting:AssertNotEquals(Object NotExpected,Object Actual,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertsameobject-expectedobject-actualstring-failuremessage","text":"Asserts that performing == on the two objects is true. For tables, this means the memory reference has to be the same.","title":"NexusUnitTesting:AssertSame(Object Expected,Object Actual,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertnotsameobject-notexpectedobject-actualstring-failuremessage","text":"Asserts that performing == on the two objects is false. For tables, this means the memory reference has to be the same.","title":"NexusUnitTesting:AssertNotSame(Object NotExpected,Object Actual,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertcloseobject-expectedobject-actualfloat-epsilonstring-failuremessage","text":"Asserts that two objects are within a given Epsilon of each other. This is recommended for floats or data types that include floats.","title":"NexusUnitTesting:AssertClose(Object Expected,Object Actual,Float Epsilon,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertnotcloseobject-notexpectedobject-actualfloat-epsilonstring-failuremessage","text":"Asserts that two objects are not within a given Epsilon of each other. This is recommended for floats or data types that include floats.","title":"NexusUnitTesting:AssertNotClose(Object NotExpected,Object Actual,Float Epsilon,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingasserttrueboolean-actualstring-failuremessage","text":"Asserts that a given bool is true .","title":"NexusUnitTesting:AssertTrue(Boolean Actual,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertfalseboolean-actualstring-failuremessage","text":"Asserts that a given bool is false .","title":"NexusUnitTesting:AssertFalse(Boolean Actual,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertnilobject-actualstring-failuremessage","text":"Asserts that a given object is nil .","title":"NexusUnitTesting:AssertNil(Object Actual,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingassertnotnilobject-actualstring-failuremessage","text":"Asserts that a given object is not nil .","title":"NexusUnitTesting:AssertNotNil(Object Actual,String FailureMessage)"},{"location":"getting-started/nexus-unit-testing-module/#nexusunittestingregisterunitteststring-namefunction-unittestfunction","text":"Creates an instance of a unit test, sets the name of the unit test, and runs the unit test function in a co-routine. The given function has the unit test as a parameter for running assertions.","title":"NexusUnitTesting:RegisterUnitTest(String Name,Function UnitTestFunction)"},{"location":"getting-started/studio/","text":"Studio The intended use for Nexus Unit Testing is with the associated plugin, but it can be used stand-alone. Plugin The plugin has not been released. The documentation will come later. Module The ModuleScript version can be used if the plugin is not preferred. To set it up, the ModuleScript can be obtained from the releases page as a Roblox model file. The recommended location is the TestService , but any other location will work. Requiring the ModuleScript works like any other with the require(ModuleScript module) function.","title":"Studio"},{"location":"getting-started/studio/#studio","text":"The intended use for Nexus Unit Testing is with the associated plugin, but it can be used stand-alone.","title":"Studio"},{"location":"getting-started/studio/#plugin","text":"The plugin has not been released. The documentation will come later.","title":"Plugin"},{"location":"getting-started/studio/#module","text":"The ModuleScript version can be used if the plugin is not preferred. To set it up, the ModuleScript can be obtained from the releases page as a Roblox model file. The recommended location is the TestService , but any other location will work. Requiring the ModuleScript works like any other with the require(ModuleScript module) function.","title":"Module"},{"location":"getting-started/util/nexus-depenendy-injector/","text":"Nexus Dependency Injector Nexus Dependency Injector provides the ability to override global variables for functions, tables, and ModuleScripts. The unit tests use Nexus Unit Testing, but it can be used with any unit testing framework. Examples of what it can be used for, included in the tests in /test/NexusUnitTesting/Util/DependencyInjector_Examples.lua include: 1. Overriding random number generators to be predictable. 2. Creating \"seams\" for requiring ModuleScripts. 3. Simulating DataStoreService and HttpService failures. 4. Creating fake Workspaces and Players. DependencyInjector Functions DependencyInjector.Inject(Table TableToInject,Injector InjectorObject) Injects the global variables of a given table with an injector object. DependencyInjector.InjectEnvironmentVariables(Object ObjectToInject,Injector InjectorObject) Injects the global variables of a given function or table with an injector object. DependencyInjector.Require(ModuleScript Script,Injector InjectorObject) Requires a clone of a ModuleScript with injected global variables. This is done by modifying the source to encapsulate the module in a function and overriding the function's global variables. The ModuleScript is cloned so the injection doesn't persist and gets around the caching problem. Unless overridden, require() is overridden with DependencyInjector::Require and script is replaced with the original script's reference. Note ModuleScript dependency injection requires cloning and modification of the source. It has to be run in a plugin or command line context. DependencyInjector.CreateOverridder() Creates and returns an overridder class. This is used for the various injection methods. Overridder Functions Overridder.new() Creates an instance of an Overridder class. This is called with DependencyInjector.CreateOverridder() . Overridder:GetIndexOverride(Object Index) Returns the IndexOverridder for a given index. Nil gets returned if there is no override. Overridder:GetCallOverride(Object Index,Table Parameters) Returns the CallOverridder for a given index. Nil gets returned if there is no Overridder or the Overridders can't return for the given parameters. Overridder:WhenIndexed(Object Index) Creates and returns an IndexOverridder object for a given index. Overridder:WhenCalled(Index,...) Creates and returns a CallOverridder object for a given index. Any additional parameters are treated as parameters that must match to be considered an override. An example is overriding math.random if the bounds are 2 and 5. IndexOverridder Functions IndexOverridder.new() Creates an IndexOverridder object. IndexOverridder:HasOverride() Returns if there an override set for the IndexOverridder. IndexOverridder:GetOverride() Returns the current override. IndexOverridder:ThenReturn(Object Override) Sets the override to return a fixed object when IndexOverridder::GetOverride is called. IndexOverridder:ThenCall(Function ReturnFunction) Sets the override to a function. When IndexOverridder::GetOverride is called, the given function will be run and the override will be what the function returns. CallOverride Functions CallOverridder.new(Table RequiredParameters) Creates a CallOverridder object. Takes in a set of required parameters for the override to be called. CallOverridder:CanBeCalled(Table GivenParameters) Returns if the override is valid for the given set of overrides. It is assumed an extra parameters beyond the initial RequiredParameters will be considered valid. CallOverridder:GetReturn(...) Returns the override with the given set of parameters. CallOverridder:ThenReturn(Object Override) Sets the CallOverridder to return a specific Object when called. CallOverridder:ThenCall(Function Callback) Sets the CallOverridder to call a given callback and return what the Callback returns. The Callback's parameters will include all of the parameters that the function was called with. CallOverridder:DoNothing() Sets the CallOverridder to do nothing when called.","title":"Nexus Dependency Injector"},{"location":"getting-started/util/nexus-depenendy-injector/#nexus-dependency-injector","text":"Nexus Dependency Injector provides the ability to override global variables for functions, tables, and ModuleScripts. The unit tests use Nexus Unit Testing, but it can be used with any unit testing framework. Examples of what it can be used for, included in the tests in /test/NexusUnitTesting/Util/DependencyInjector_Examples.lua include: 1. Overriding random number generators to be predictable. 2. Creating \"seams\" for requiring ModuleScripts. 3. Simulating DataStoreService and HttpService failures. 4. Creating fake Workspaces and Players.","title":"Nexus Dependency Injector"},{"location":"getting-started/util/nexus-depenendy-injector/#dependencyinjector-functions","text":"","title":"DependencyInjector Functions"},{"location":"getting-started/util/nexus-depenendy-injector/#dependencyinjectorinjecttable-tabletoinjectinjector-injectorobject","text":"Injects the global variables of a given table with an injector object.","title":"DependencyInjector.Inject(Table TableToInject,Injector InjectorObject)"},{"location":"getting-started/util/nexus-depenendy-injector/#dependencyinjectorinjectenvironmentvariablesobject-objecttoinjectinjector-injectorobject","text":"Injects the global variables of a given function or table with an injector object.","title":"DependencyInjector.InjectEnvironmentVariables(Object ObjectToInject,Injector InjectorObject)"},{"location":"getting-started/util/nexus-depenendy-injector/#dependencyinjectorrequiremodulescript-scriptinjector-injectorobject","text":"Requires a clone of a ModuleScript with injected global variables. This is done by modifying the source to encapsulate the module in a function and overriding the function's global variables. The ModuleScript is cloned so the injection doesn't persist and gets around the caching problem. Unless overridden, require() is overridden with DependencyInjector::Require and script is replaced with the original script's reference. Note ModuleScript dependency injection requires cloning and modification of the source. It has to be run in a plugin or command line context.","title":"DependencyInjector.Require(ModuleScript Script,Injector InjectorObject)"},{"location":"getting-started/util/nexus-depenendy-injector/#dependencyinjectorcreateoverridder","text":"Creates and returns an overridder class. This is used for the various injection methods.","title":"DependencyInjector.CreateOverridder()"},{"location":"getting-started/util/nexus-depenendy-injector/#overridder-functions","text":"","title":"Overridder Functions"},{"location":"getting-started/util/nexus-depenendy-injector/#overriddernew","text":"Creates an instance of an Overridder class. This is called with DependencyInjector.CreateOverridder() .","title":"Overridder.new()"},{"location":"getting-started/util/nexus-depenendy-injector/#overriddergetindexoverrideobject-index","text":"Returns the IndexOverridder for a given index. Nil gets returned if there is no override.","title":"Overridder:GetIndexOverride(Object Index)"},{"location":"getting-started/util/nexus-depenendy-injector/#overriddergetcalloverrideobject-indextable-parameters","text":"Returns the CallOverridder for a given index. Nil gets returned if there is no Overridder or the Overridders can't return for the given parameters.","title":"Overridder:GetCallOverride(Object Index,Table Parameters)"},{"location":"getting-started/util/nexus-depenendy-injector/#overridderwhenindexedobject-index","text":"Creates and returns an IndexOverridder object for a given index.","title":"Overridder:WhenIndexed(Object Index)"},{"location":"getting-started/util/nexus-depenendy-injector/#overridderwhencalledindex","text":"Creates and returns a CallOverridder object for a given index. Any additional parameters are treated as parameters that must match to be considered an override. An example is overriding math.random if the bounds are 2 and 5.","title":"Overridder:WhenCalled(Index,...)"},{"location":"getting-started/util/nexus-depenendy-injector/#indexoverridder-functions","text":"","title":"IndexOverridder Functions"},{"location":"getting-started/util/nexus-depenendy-injector/#indexoverriddernew","text":"Creates an IndexOverridder object.","title":"IndexOverridder.new()"},{"location":"getting-started/util/nexus-depenendy-injector/#indexoverridderhasoverride","text":"Returns if there an override set for the IndexOverridder.","title":"IndexOverridder:HasOverride()"},{"location":"getting-started/util/nexus-depenendy-injector/#indexoverriddergetoverride","text":"Returns the current override.","title":"IndexOverridder:GetOverride()"},{"location":"getting-started/util/nexus-depenendy-injector/#indexoverridderthenreturnobject-override","text":"Sets the override to return a fixed object when IndexOverridder::GetOverride is called.","title":"IndexOverridder:ThenReturn(Object Override)"},{"location":"getting-started/util/nexus-depenendy-injector/#indexoverridderthencallfunction-returnfunction","text":"Sets the override to a function. When IndexOverridder::GetOverride is called, the given function will be run and the override will be what the function returns.","title":"IndexOverridder:ThenCall(Function ReturnFunction)"},{"location":"getting-started/util/nexus-depenendy-injector/#calloverride-functions","text":"","title":"CallOverride Functions"},{"location":"getting-started/util/nexus-depenendy-injector/#calloverriddernewtable-requiredparameters","text":"Creates a CallOverridder object. Takes in a set of required parameters for the override to be called.","title":"CallOverridder.new(Table RequiredParameters)"},{"location":"getting-started/util/nexus-depenendy-injector/#calloverriddercanbecalledtable-givenparameters","text":"Returns if the override is valid for the given set of overrides. It is assumed an extra parameters beyond the initial RequiredParameters will be considered valid.","title":"CallOverridder:CanBeCalled(Table GivenParameters)"},{"location":"getting-started/util/nexus-depenendy-injector/#calloverriddergetreturn","text":"Returns the override with the given set of parameters.","title":"CallOverridder:GetReturn(...)"},{"location":"getting-started/util/nexus-depenendy-injector/#calloverridderthenreturnobject-override","text":"Sets the CallOverridder to return a specific Object when called.","title":"CallOverridder:ThenReturn(Object Override)"},{"location":"getting-started/util/nexus-depenendy-injector/#calloverridderthencallfunction-callback","text":"Sets the CallOverridder to call a given callback and return what the Callback returns. The Callback's parameters will include all of the parameters that the function was called with.","title":"CallOverridder:ThenCall(Function Callback)"},{"location":"getting-started/util/nexus-depenendy-injector/#calloverridderdonothing","text":"Sets the CallOverridder to do nothing when called.","title":"CallOverridder:DoNothing()"}]}