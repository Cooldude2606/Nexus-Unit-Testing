{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nexus Unit Testing Nexus Unit Testing is an assertion based unit testing framework for Roblox development. Additionally provides support for running and analyzing TestEZ tests.","title":"Home"},{"location":"#nexus-unit-testing","text":"Nexus Unit Testing is an assertion based unit testing framework for Roblox development. Additionally provides support for running and analyzing TestEZ tests.","title":"Nexus Unit Testing"},{"location":"contributing/","text":"Contributing Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Have the appropriate unit tests as examples. This is mainly for new utilities. 4. Comments are included. The project structure of this repository is version 0.5 of Rojo by LPGhatguy . Nexus Git can be used instead if Roblox Studio is used as the IDE instead of a text editor like Microsoft Visual Studio Code. Nexus Git can be used to sync into and out of Roblox Studio, while Rojo can currently only sync into Roblox Studio.","title":"Contributing"},{"location":"contributing/#contributing","text":"Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Have the appropriate unit tests as examples. This is mainly for new utilities. 4. Comments are included. The project structure of this repository is version 0.5 of Rojo by LPGhatguy . Nexus Git can be used instead if Roblox Studio is used as the IDE instead of a text editor like Microsoft Visual Studio Code. Nexus Git can be used to sync into and out of Roblox Studio, while Rojo can currently only sync into Roblox Studio.","title":"Contributing"},{"location":"getting-started/running-tests/","text":"Running Tests Tests can be run with several different methods. All of the methods require being run in the command line or as a plugin since reading and modifying the Source property is required for detecting and running Nexus Unit Testing tests. This may change in the future, considering TestEZ's design doesn't have this requirement. Warning Using the RunTests method is not recommended since it hides the output of the tests. Using the plugin is recommended. In the command line version can be run using the RunTests method in the main NexusUnitTesting class. require ( game . ReplicatedStorage . NexusUnitTesting ). RunTests () To run only the tests in a specific container, a Roblox instance can be specified. require ( game . ReplicatedStorage . NexusUnitTesting ). RunTes ( game . ReplicatedStorage . NexusUnitTestingTests ) Lemur Lemur has not been tested with Nexus Unit Testing. TestEZ is used with Lemur projects and should be used instead. Roblox Studio Plugin The plugin has not been released yet. Information will updated when the plugin is public.","title":"Running Tests"},{"location":"getting-started/running-tests/#running-tests","text":"Tests can be run with several different methods. All of the methods require being run in the command line or as a plugin since reading and modifying the Source property is required for detecting and running Nexus Unit Testing tests. This may change in the future, considering TestEZ's design doesn't have this requirement. Warning Using the RunTests method is not recommended since it hides the output of the tests. Using the plugin is recommended. In the command line version can be run using the RunTests method in the main NexusUnitTesting class. require ( game . ReplicatedStorage . NexusUnitTesting ). RunTests () To run only the tests in a specific container, a Roblox instance can be specified. require ( game . ReplicatedStorage . NexusUnitTesting ). RunTes ( game . ReplicatedStorage . NexusUnitTestingTests )","title":"Running Tests"},{"location":"getting-started/running-tests/#lemur","text":"Lemur has not been tested with Nexus Unit Testing. TestEZ is used with Lemur projects and should be used instead.","title":"Lemur"},{"location":"getting-started/running-tests/#roblox-studio-plugin","text":"The plugin has not been released yet. Information will updated when the plugin is public.","title":"Roblox Studio Plugin"},{"location":"getting-started/writing-tests/","text":"Writing Tests Nexus Unit Testing and TestEZ tests are intended to be written in ModuleScripts . Nexus Unit Testing Nexus Unit Testing is designed to not rely on returned methods, so tests can be written anywhere in the ModuleScript as long as it runs. Detection relies on NexusUnitTesting being require d at some point in the script. Due to how tests are set up, this is required either way. --Require Nexus Unit Testing. Any of thje following will be detected as long --the module is NexusUnitTesting (not something like NexusUnitTesting2). local NexusUnitTesting = require ( game . Path . To . NexusUnitTesting ) local NexusUnitTesting = require ( \"NexusUnitTesting\" ) local NexusUnitTesting = require ( 'NexusUnitTesting' ) --Register a function as a unit test. --This is deprecated, but works to not break V.1.X.X tests. Setup and teardown isn't supported. NexusUnitTesting : RegisterUnitTest ( \"TestName1\" , function ( UnitTest ) UnitTest : AssertEquals ( 1 + 1 , 2 , \"Addition doesn't work.\" ) end ) --Register a unit test class created the long way. local UnitTest = NexusUnitTesting . UnitTest . new ( \"TestName2\" ) function UnitTest : Setup () print ( self . Name .. \" set up.\" ) end function UnitTest : Run () self : AssertEquals ( 1 + 1 , 2 , \"Addition doesn't work.\" ) end NexusUnitTesting : RegisterUnitTest ( UnitTest ) --Register a unit test class created with setters. NexusUnitTesting : RegisterUnitTest ( UnitTest . new ( \"TestName3\" ): SetSetup ( function ( self ) print ( self . Name .. \" set up.\" ) end ): SetRun ( function ( self ) self : AssertEquals ( 1 + 1 , 2 , \"Addition doesn't work.\" ) end )) --Return something to prevent Roblox throwing an error from nothing being returned. --If a function is returned, it will be ran (mainly for TestEZ). return true TestEZ TestEZ's detection is different since it relies on the name of the script ending with .spec . This allows for unit tests to have the same parent as the module being tested (ex: UnitTest and UnitTest.spec ). The structure for TestEZ involves having the tests be contained in a returned function to allow for the environment being modified without having to modify the source. return function () --Describe a test. describe ( \"TestName\" , function () --Desribe how it should behave. it ( \"should perform addition\" , function () expect ( 1 + 1 ). to . equal ( 2 ) end ) it ( \"should perform subtraction\" , function () expect ( 1 - 1 ). to . equal ( 0 ) end ) end ) end","title":"Writing Tests"},{"location":"getting-started/writing-tests/#writing-tests","text":"Nexus Unit Testing and TestEZ tests are intended to be written in ModuleScripts .","title":"Writing Tests"},{"location":"getting-started/writing-tests/#nexus-unit-testing","text":"Nexus Unit Testing is designed to not rely on returned methods, so tests can be written anywhere in the ModuleScript as long as it runs. Detection relies on NexusUnitTesting being require d at some point in the script. Due to how tests are set up, this is required either way. --Require Nexus Unit Testing. Any of thje following will be detected as long --the module is NexusUnitTesting (not something like NexusUnitTesting2). local NexusUnitTesting = require ( game . Path . To . NexusUnitTesting ) local NexusUnitTesting = require ( \"NexusUnitTesting\" ) local NexusUnitTesting = require ( 'NexusUnitTesting' ) --Register a function as a unit test. --This is deprecated, but works to not break V.1.X.X tests. Setup and teardown isn't supported. NexusUnitTesting : RegisterUnitTest ( \"TestName1\" , function ( UnitTest ) UnitTest : AssertEquals ( 1 + 1 , 2 , \"Addition doesn't work.\" ) end ) --Register a unit test class created the long way. local UnitTest = NexusUnitTesting . UnitTest . new ( \"TestName2\" ) function UnitTest : Setup () print ( self . Name .. \" set up.\" ) end function UnitTest : Run () self : AssertEquals ( 1 + 1 , 2 , \"Addition doesn't work.\" ) end NexusUnitTesting : RegisterUnitTest ( UnitTest ) --Register a unit test class created with setters. NexusUnitTesting : RegisterUnitTest ( UnitTest . new ( \"TestName3\" ): SetSetup ( function ( self ) print ( self . Name .. \" set up.\" ) end ): SetRun ( function ( self ) self : AssertEquals ( 1 + 1 , 2 , \"Addition doesn't work.\" ) end )) --Return something to prevent Roblox throwing an error from nothing being returned. --If a function is returned, it will be ran (mainly for TestEZ). return true","title":"Nexus Unit Testing"},{"location":"getting-started/writing-tests/#testez","text":"TestEZ's detection is different since it relies on the name of the script ending with .spec . This allows for unit tests to have the same parent as the module being tested (ex: UnitTest and UnitTest.spec ). The structure for TestEZ involves having the tests be contained in a returned function to allow for the environment being modified without having to modify the source. return function () --Describe a test. describe ( \"TestName\" , function () --Desribe how it should behave. it ( \"should perform addition\" , function () expect ( 1 + 1 ). to . equal ( 2 ) end ) it ( \"should perform subtraction\" , function () expect ( 1 - 1 ). to . equal ( 0 ) end ) end ) end","title":"TestEZ"},{"location":"getting-started/classes/ErrorAssertor/","text":"UnitTest.ErrorAssertor (extends NexusInstance ) Class returned from UnitTest:AssertErrors(...) to run assertions on error messages. All methods can be chained. self : AssertErrors ( function () error ( \"Test error\" ) end ): Contains ( \"error\" ): Contains ( \"Test\" ): NotContains ( \"something else\" ): NotEquals ( \"something else\" ) static ErrorAssertor ErrorAssertor.new(string ErrorMessage) Creates an ErrorAssertor object from a given error message. void ErrorAssertor:Contains(string Message) Asserts that the error message contains a given string, including the casing. Throws an error if the assertion is invalid. void ErrorAssertor:NotContains(string Message) Asserts that the error message doesn't contains a given string, including the casing. Throws an error if the assertion is invalid. void ErrorAssertor:Equals(string Message) Asserts that the error message equals a given string, including the casing. Throws an error if the assertion is invalid. Warning Error messages typically include the script and line number, which can change. Using ErrorAssertor:Contains will be more reliable. void ErrorAssertor:NotEquals(string Message) Asserts that the error message doesn't equal a given string, including the casing. Throws an error if the assertion is invalid. Warning Error messages typically include the script and line number, which can change. Using ErrorAssertor:NotContains will be more reliable.","title":"ErrorAssertor"},{"location":"getting-started/classes/ErrorAssertor/#unittesterrorassertor","text":"(extends NexusInstance ) Class returned from UnitTest:AssertErrors(...) to run assertions on error messages. All methods can be chained. self : AssertErrors ( function () error ( \"Test error\" ) end ): Contains ( \"error\" ): Contains ( \"Test\" ): NotContains ( \"something else\" ): NotEquals ( \"something else\" )","title":"UnitTest.ErrorAssertor"},{"location":"getting-started/classes/ErrorAssertor/#static-errorassertor-errorassertornewstring-errormessage","text":"Creates an ErrorAssertor object from a given error message.","title":"static ErrorAssertor ErrorAssertor.new(string ErrorMessage)"},{"location":"getting-started/classes/ErrorAssertor/#void-errorassertorcontainsstring-message","text":"Asserts that the error message contains a given string, including the casing. Throws an error if the assertion is invalid.","title":"void ErrorAssertor:Contains(string Message)"},{"location":"getting-started/classes/ErrorAssertor/#void-errorassertornotcontainsstring-message","text":"Asserts that the error message doesn't contains a given string, including the casing. Throws an error if the assertion is invalid.","title":"void ErrorAssertor:NotContains(string Message)"},{"location":"getting-started/classes/ErrorAssertor/#void-errorassertorequalsstring-message","text":"Asserts that the error message equals a given string, including the casing. Throws an error if the assertion is invalid. Warning Error messages typically include the script and line number, which can change. Using ErrorAssertor:Contains will be more reliable.","title":"void ErrorAssertor:Equals(string Message)"},{"location":"getting-started/classes/ErrorAssertor/#void-errorassertornotequalsstring-message","text":"Asserts that the error message doesn't equal a given string, including the casing. Throws an error if the assertion is invalid. Warning Error messages typically include the script and line number, which can change. Using ErrorAssertor:NotContains will be more reliable.","title":"void ErrorAssertor:NotEquals(string Message)"},{"location":"getting-started/classes/UnitTest/","text":"UnitTest.UnitTest (extends NexusInstance ) static UnitTest UnitTest.UnitTest Cyclic reference to UnitTest . When require(\"NexusUnitTesting\") is called, a UnitTest object is retruned. NexusUnitTesting.UnitTest.new(...) can be called to create a new unit test object to pass into NexusUnitTesting:RegisterUnitTest(...) . static UnitTest UnitTest.new(string UnitTestName) Creates a UnitTest object with the given name. string UniTest.Name Name of the unit test. NexusUnitTesting.TestState (string) UnitTest.State The state of the unit test. Can be: - NexusUnitTesting.TestState.NotRun (\"NOTRUN\") - The test has not been ran. - NexusUnitTesting.TestState.InProgress (\"INPROGRESS\") - The test is running. - NexusUnitTesting.TestState.Skipped (\"SKIPPED\") - The test was skipped. - NexusUnitTesting.TestState.Passed (\"PASSED\") - The test passed. - NexusUnitTesting.TestState.Failed (\"FAILED\") - The test failed (error or assertion failed). NexusUnitTesting.TestState (string) UnitTest.CombinedState The state of the unit test and subtests. Can be: - NexusUnitTesting.TestState.NotRun (\"NOTRUN\") - The test and subtests has not been ran. - NexusUnitTesting.TestState.InProgress (\"INPROGRESS\") - The tests or one subtest is running. - NexusUnitTesting.TestState.Skipped (\"SKIPPED\") - The test has skipped or at least one test has skipped with no subtest failing or still running. - NexusUnitTesting.TestState.Passed (\"PASSED\") - The test passed and all subtests are passed or not ran. - NexusUnitTesting.TestState.Failed (\"FAILED\") - The test failed or at least one test has failed with no subtest still running. List<UnitTest> UnitTest.SubTests List of tests that the test contains. List<<string,Enum.MessageType>> UnitTest.Output List of the messages outputted while setting up, running, and tearing down the test. The list contains a table with the first item (index 1 ) being the message and the second item (index 2 ) the type. The errors included the stack trace are stored in the table. NexusEvent<UnitTest> UnitTest.TestAdded Event invoked whena test is added. When fired, the added UnitTest is passed. NexusEvent<string,Enum.MessageType> UnitTest.MessageOutputted Event invoked when a message is outputted. When fired, the message of the output is passed as well as the type. void UnitTest:Setup() Sets up the test. Intended to be replaced before running if additional setup is not needed. void UnitTest:Run() Runs the test. If the setup fails, the test is not continued. Intended to be replaced before running to run the test. void UnitTest:Teardown() Tears down the test. Runs regardless of the test passing or failing. Intended to be replaced before running to clear the resources used by the test. void UnitTest:OutputMessage(Enum.MessageType,...) Registers a message being outputted. Intended to be used internally since print and warn are replaced in the environment. void UnitTest:RunTest() Runs the test and updates the state. Should not be replaced since it is used to run UnitTest:Setup() , UnitTest:Run() , and UnitTest:Teardown() . void UnitTest:RunSubtests() Runs all of the subtests and updates the combined state. `void UnitTest:UnitTest:SetEnvironmentOverride(string Name,object Value) Sets an environment override for the methods in the test. Can be chained with other methods ( Object:Method1(...):Method2(...)... ) void UnitTest:SetSetup(function Method) Sets the Setup method. Can be chained with other methods ( Object:Method1(...):Method2(...)... ) void UnitTest:SetRun(function Method) Sets the Run method. Can be chained with other methods ( Object:Method1(...):Method2(...)... ) void UnitTest:SetTeardown(function Method) Sets the Teardown method. Can be chained with other methods ( Object:Method1(...):Method2(...)... ) void UnitTest:UpdateCombinedState() Updates the UnitTest.CombinedState property based on the test and subtests. Not intended to be called externally. void UnitTest:StopAssertionIfCompleted() Stops the calling thread if the test has completed. This is to prevent threaded tests from calling assertions after the test's state has been determined. void UnitTest:Pass(string? Reason) Marks a unit test as passed. A reason for passing can also be specified. Info This yields the thread after running. If this is called in UnitTest:Run() , this will not affect UnitTest:Teardown() . Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:Fail(string? Reason) Marks a unit test as failed. A reason for passing can also be specified. Warning This throws an error to stop the test. Anything ran in the method afterwards will not run. If this is called in UnitTest:Run() , this will not affect UnitTest:Teardown() . Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:Skip(string? Reason) Marks a unit test as skipped. A reason for passing can also be specified. Info This yields the thread after running. If this is called in UnitTest:Run() , this will not affect UnitTest:Teardown() . Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:Assert(function Function,string Message) Runs an assertion. The given function should return true if the assertion is valid and false if the assertion is invalid. If the assertion fails, an error is thrown with the given message. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertEquals(object ExpectedObject,object ActualObject,string? Message) Asserts that two objects are equal. Special cases are handled for objects like arrays that may have the same elements. Not intended to be used on Roblox Instances. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertNotEquals(object ExpectedObject,object ActualObject,string? Message) Asserts that two objects aren't equal. Special cases are handled for objects like arrays that may have the same elements. Not intended to be used on Roblox Instances. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertSame(object ExpectedObject,object ActualObject,string Message) Asserts that two objects are the same. This is mainly used for testing if a new array or instance isn't created. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertNotSame(object ExpectedObject,object ActualObject,string? Message) Asserts that two objects aren't the same. This is mainly used for testing if a new array or instance isn't created. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertClose(object ExpectedObject,object ActualObject,float? Epsilon,string? Message) Asserts that two objects are within a given Epsilon of each other. If the message is used in place of the Epsilon, 0.001 will be used. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertNotClose(object ExpectedObject,object ActualObject,float? Epsilon,string? Message) Asserts that two objects aren't within a given Epsilon of each other. If the message is used in place of the Epsilon, 0.001 will be used. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertFalse(bool ActualObject,string? Message) Asserts that an object is false. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertTrue(bool ActualObject,string? Message) Asserts that an object is true. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertNil(object ActualObject,string? Message) Asserts that an object is nil. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. void UnitTest:AssertNotNil(object ActualObject,string? Message) Asserts that an object is not nil. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended. ErrorAssertor UnitTest:AssertErrors(function Function,string? Message) Asserts that an error is thrown. Returns an ErrorAssertor object that can be used to validate the error's message. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"UnitTest"},{"location":"getting-started/classes/UnitTest/#unittestunittest","text":"(extends NexusInstance )","title":"UnitTest.UnitTest"},{"location":"getting-started/classes/UnitTest/#static-unittest-unittestunittest","text":"Cyclic reference to UnitTest . When require(\"NexusUnitTesting\") is called, a UnitTest object is retruned. NexusUnitTesting.UnitTest.new(...) can be called to create a new unit test object to pass into NexusUnitTesting:RegisterUnitTest(...) .","title":"static UnitTest UnitTest.UnitTest"},{"location":"getting-started/classes/UnitTest/#static-unittest-unittestnewstring-unittestname","text":"Creates a UnitTest object with the given name.","title":"static UnitTest UnitTest.new(string UnitTestName)"},{"location":"getting-started/classes/UnitTest/#string-unitestname","text":"Name of the unit test.","title":"string UniTest.Name"},{"location":"getting-started/classes/UnitTest/#nexusunittestingteststate-string-unitteststate","text":"The state of the unit test. Can be: - NexusUnitTesting.TestState.NotRun (\"NOTRUN\") - The test has not been ran. - NexusUnitTesting.TestState.InProgress (\"INPROGRESS\") - The test is running. - NexusUnitTesting.TestState.Skipped (\"SKIPPED\") - The test was skipped. - NexusUnitTesting.TestState.Passed (\"PASSED\") - The test passed. - NexusUnitTesting.TestState.Failed (\"FAILED\") - The test failed (error or assertion failed).","title":"NexusUnitTesting.TestState (string) UnitTest.State"},{"location":"getting-started/classes/UnitTest/#nexusunittestingteststate-string-unittestcombinedstate","text":"The state of the unit test and subtests. Can be: - NexusUnitTesting.TestState.NotRun (\"NOTRUN\") - The test and subtests has not been ran. - NexusUnitTesting.TestState.InProgress (\"INPROGRESS\") - The tests or one subtest is running. - NexusUnitTesting.TestState.Skipped (\"SKIPPED\") - The test has skipped or at least one test has skipped with no subtest failing or still running. - NexusUnitTesting.TestState.Passed (\"PASSED\") - The test passed and all subtests are passed or not ran. - NexusUnitTesting.TestState.Failed (\"FAILED\") - The test failed or at least one test has failed with no subtest still running.","title":"NexusUnitTesting.TestState (string) UnitTest.CombinedState"},{"location":"getting-started/classes/UnitTest/#listltunittestgt-unittestsubtests","text":"List of tests that the test contains.","title":"List&lt;UnitTest&gt; UnitTest.SubTests"},{"location":"getting-started/classes/UnitTest/#listltltstringenummessagetypegtgt-unittestoutput","text":"List of the messages outputted while setting up, running, and tearing down the test. The list contains a table with the first item (index 1 ) being the message and the second item (index 2 ) the type. The errors included the stack trace are stored in the table.","title":"List&lt;&lt;string,Enum.MessageType&gt;&gt; UnitTest.Output"},{"location":"getting-started/classes/UnitTest/#nexuseventltunittestgt-unittesttestadded","text":"Event invoked whena test is added. When fired, the added UnitTest is passed.","title":"NexusEvent&lt;UnitTest&gt; UnitTest.TestAdded"},{"location":"getting-started/classes/UnitTest/#nexuseventltstringenummessagetypegt-unittestmessageoutputted","text":"Event invoked when a message is outputted. When fired, the message of the output is passed as well as the type.","title":"NexusEvent&lt;string,Enum.MessageType&gt; UnitTest.MessageOutputted"},{"location":"getting-started/classes/UnitTest/#void-unittestsetup","text":"Sets up the test. Intended to be replaced before running if additional setup is not needed.","title":"void UnitTest:Setup()"},{"location":"getting-started/classes/UnitTest/#void-unittestrun","text":"Runs the test. If the setup fails, the test is not continued. Intended to be replaced before running to run the test.","title":"void UnitTest:Run()"},{"location":"getting-started/classes/UnitTest/#void-unittestteardown","text":"Tears down the test. Runs regardless of the test passing or failing. Intended to be replaced before running to clear the resources used by the test.","title":"void UnitTest:Teardown()"},{"location":"getting-started/classes/UnitTest/#void-unittestoutputmessageenummessagetype","text":"Registers a message being outputted. Intended to be used internally since print and warn are replaced in the environment.","title":"void UnitTest:OutputMessage(Enum.MessageType,...)"},{"location":"getting-started/classes/UnitTest/#void-unittestruntest","text":"Runs the test and updates the state. Should not be replaced since it is used to run UnitTest:Setup() , UnitTest:Run() , and UnitTest:Teardown() .","title":"void UnitTest:RunTest()"},{"location":"getting-started/classes/UnitTest/#void-unittestrunsubtests","text":"Runs all of the subtests and updates the combined state.","title":"void UnitTest:RunSubtests()"},{"location":"getting-started/classes/UnitTest/#void-unittestunittestsetenvironmentoverridestring-nameobject-value","text":"Sets an environment override for the methods in the test. Can be chained with other methods ( Object:Method1(...):Method2(...)... )","title":"`void UnitTest:UnitTest:SetEnvironmentOverride(string Name,object Value)"},{"location":"getting-started/classes/UnitTest/#void-unittestsetsetupfunction-method","text":"Sets the Setup method. Can be chained with other methods ( Object:Method1(...):Method2(...)... )","title":"void UnitTest:SetSetup(function Method)"},{"location":"getting-started/classes/UnitTest/#void-unittestsetrunfunction-method","text":"Sets the Run method. Can be chained with other methods ( Object:Method1(...):Method2(...)... )","title":"void UnitTest:SetRun(function Method)"},{"location":"getting-started/classes/UnitTest/#void-unittestsetteardownfunction-method","text":"Sets the Teardown method. Can be chained with other methods ( Object:Method1(...):Method2(...)... )","title":"void UnitTest:SetTeardown(function Method)"},{"location":"getting-started/classes/UnitTest/#void-unittestupdatecombinedstate","text":"Updates the UnitTest.CombinedState property based on the test and subtests. Not intended to be called externally.","title":"void UnitTest:UpdateCombinedState()"},{"location":"getting-started/classes/UnitTest/#void-unitteststopassertionifcompleted","text":"Stops the calling thread if the test has completed. This is to prevent threaded tests from calling assertions after the test's state has been determined.","title":"void UnitTest:StopAssertionIfCompleted()"},{"location":"getting-started/classes/UnitTest/#void-unittestpassstring-reason","text":"Marks a unit test as passed. A reason for passing can also be specified. Info This yields the thread after running. If this is called in UnitTest:Run() , this will not affect UnitTest:Teardown() . Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:Pass(string? Reason)"},{"location":"getting-started/classes/UnitTest/#void-unittestfailstring-reason","text":"Marks a unit test as failed. A reason for passing can also be specified. Warning This throws an error to stop the test. Anything ran in the method afterwards will not run. If this is called in UnitTest:Run() , this will not affect UnitTest:Teardown() . Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:Fail(string? Reason)"},{"location":"getting-started/classes/UnitTest/#void-unittestskipstring-reason","text":"Marks a unit test as skipped. A reason for passing can also be specified. Info This yields the thread after running. If this is called in UnitTest:Run() , this will not affect UnitTest:Teardown() . Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:Skip(string? Reason)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertfunction-functionstring-message","text":"Runs an assertion. The given function should return true if the assertion is valid and false if the assertion is invalid. If the assertion fails, an error is thrown with the given message. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:Assert(function Function,string Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertequalsobject-expectedobjectobject-actualobjectstring-message","text":"Asserts that two objects are equal. Special cases are handled for objects like arrays that may have the same elements. Not intended to be used on Roblox Instances. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertEquals(object ExpectedObject,object ActualObject,string? Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertnotequalsobject-expectedobjectobject-actualobjectstring-message","text":"Asserts that two objects aren't equal. Special cases are handled for objects like arrays that may have the same elements. Not intended to be used on Roblox Instances. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertNotEquals(object ExpectedObject,object ActualObject,string? Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertsameobject-expectedobjectobject-actualobjectstring-message","text":"Asserts that two objects are the same. This is mainly used for testing if a new array or instance isn't created. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertSame(object ExpectedObject,object ActualObject,string Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertnotsameobject-expectedobjectobject-actualobjectstring-message","text":"Asserts that two objects aren't the same. This is mainly used for testing if a new array or instance isn't created. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertNotSame(object ExpectedObject,object ActualObject,string? Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertcloseobject-expectedobjectobject-actualobjectfloat-epsilonstring-message","text":"Asserts that two objects are within a given Epsilon of each other. If the message is used in place of the Epsilon, 0.001 will be used. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertClose(object ExpectedObject,object ActualObject,float? Epsilon,string? Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertnotcloseobject-expectedobjectobject-actualobjectfloat-epsilonstring-message","text":"Asserts that two objects aren't within a given Epsilon of each other. If the message is used in place of the Epsilon, 0.001 will be used. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertNotClose(object ExpectedObject,object ActualObject,float? Epsilon,string? Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertfalsebool-actualobjectstring-message","text":"Asserts that an object is false. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertFalse(bool ActualObject,string? Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestasserttruebool-actualobjectstring-message","text":"Asserts that an object is true. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertTrue(bool ActualObject,string? Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertnilobject-actualobjectstring-message","text":"Asserts that an object is nil. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertNil(object ActualObject,string? Message)"},{"location":"getting-started/classes/UnitTest/#void-unittestassertnotnilobject-actualobjectstring-message","text":"Asserts that an object is not nil. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"void UnitTest:AssertNotNil(object ActualObject,string? Message)"},{"location":"getting-started/classes/UnitTest/#errorassertor-unittestasserterrorsfunction-functionstring-message","text":"Asserts that an error is thrown. Returns an ErrorAssertor object that can be used to validate the error's message. Warning This calls UnitTest:StopAssertionIfCompleted() before running. If the test has already completed, this will cause the test to function to yield, which may be unintended.","title":"ErrorAssertor UnitTest:AssertErrors(function Function,string? Message)"}]}